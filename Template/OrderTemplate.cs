// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TemplatePrint.Models
{
    using System.Collections.Generic;
    using TemplatePrint.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "I:\TemplatePrint\Template\OrderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class OrderTemplate : OrderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\n\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Print Order Details</title>\r\n  " +
                    "  <!-- Bootstrap CSS -->\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap" +
                    "@5.3.0-alpha3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n    <style>\r\n    " +
                    "    /* Page size for A5 */\r\n        @page {\r\n            size: A5;\r\n            " +
                    "margin: 10mm; /* Adjust as needed */\r\n        }\r\n\r\n        /* Ensure each order " +
                    "fits into a full page */\r\n        .wrapper {\r\n            max-width: 100%;\r\n    " +
                    "        display: flex;\r\n            justify-content: center;\r\n            align-" +
                    "items: center;\r\n            page-break-inside: avoid; /* Prevent page breaks ins" +
                    "ide orders */\r\n        }\r\n\r\n        .border-line {\r\n            border: 2px soli" +
                    "d black;\r\n        }\r\n\r\n        .table {\r\n            width: 100%;\r\n            p" +
                    "osition: relative;\r\n            background: white;\r\n            font-size: 14px;" +
                    " /* Reduce font size to fit better on A5 */\r\n        }\r\n\r\n        .text-center {" +
                    "\r\n            text-align: center;\r\n        }\r\n\r\n        .d-block {\r\n            " +
                    "display: block;\r\n        }\r\n\r\n        .d-flex {\r\n            display: flex;\r\n   " +
                    "     }\r\n\r\n        .justify-content-between {\r\n            justify-content: space" +
                    "-between;\r\n        }\r\n\r\n        .justify-content-around {\r\n            justify-c" +
                    "ontent: space-around;\r\n        }\r\n\r\n        .border-bottom {\r\n            border" +
                    "-bottom: 2px solid black;\r\n        }\r\n\r\n        .border-top {\r\n            borde" +
                    "r-top: 2px solid black;\r\n        }\r\n\r\n        .my-4 {\r\n            margin: 10px " +
                    "0;\r\n        }\r\n\r\n        .py-4 {\r\n            padding: 10px 0;\r\n        }\r\n\r\n   " +
                    "     .px-2 {\r\n            padding: 0 8px;\r\n        }\r\n\r\n        .pb-4 {\r\n       " +
                    "     padding-bottom: 10px;\r\n        }\r\n\r\n        .pt-4 {\r\n            padding-to" +
                    "p: 10px;\r\n        }\r\n\r\n        .mx-4 {\r\n            margin: 0 10px;\r\n        }\r\n" +
                    "\r\n        table {\r\n            page-break-inside: avoid; /* Ensure table does no" +
                    "t break across pages */\r\n        }\r\n\r\n        .wrap-text {\r\n            max-widt" +
                    "h: 200px;\r\n            word-wrap: break-word;\r\n            overflow-wrap: break-" +
                    "word;\r\n            word-break: keep-all;\r\n        }\r\n        \r\n        /* Ensure" +
                    " each order starts on a new page */\r\n        .page-break {\r\n            page-bre" +
                    "ak-after: always;\r\n        }\r\n    </style>\r\n</head>\r\n<body onload=\"window.print(" +
                    ")\">\r\n");
            
            #line 110 "I:\TemplatePrint\Template\OrderTemplate.tt"
 foreach(var order in _orders) { 
            
            #line default
            #line hidden
            this.Write("    <div class=\"wrapper my-4 page-break\">\r\n        <table class=\"table border-lin" +
                    "e\">\r\n            <tbody>\r\n                <tr>\r\n                    <td colspan=" +
                    "\"2\" class=\"text-center py-4\">\r\n                        <h1 class=\"h5\">");
            
            #line 116 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.S_Company));
            
            #line default
            #line hidden
            this.Write("</h1>\r\n                        <h4 class=\"h6 wrap-text\">");
            
            #line 117 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.OriginBranchName));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 117 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.DeliveryAddress));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n                        <h5>PAN: ");
            
            #line 118 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.S_TaxID_PANNO));
            
            #line default
            #line hidden
            this.Write("</h5>\r\n                    </td>\r\n                </tr>\r\n                <tr clas" +
                    "s=\"border-line\">\r\n                    <td class=\"px-2\">From: ");
            
            #line 122 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.OriginBranchName));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                    <td class=\"px-2\">Pick Up Date: ");
            
            #line 123 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.PlannedPickupDateTime));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                </tr>\r\n                <tr class=\"border-line\">\r\n         " +
                    "           <td class=\"px-2\">Destination: ");
            
            #line 126 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.DestinationBranchName));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                    <td class=\"px-2\">Package Type: ");
            
            #line 127 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.PackagetypeName));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                </tr>\r\n                <tr class=\"border-line\">\r\n         " +
                    "           <td colspan=\"2\" class=\"px-2 py-2\">\r\n                        <div><str" +
                    "ong>Weight:</strong> ");
            
            #line 131 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.Package_Weight));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Description:</strong></div>\r\n       " +
                    "                 <div><strong>Paymode:</strong> ");
            
            #line 133 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.PaymentMode));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Package Qty:</strong> ");
            
            #line 134 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.Package_Pcs));
            
            #line default
            #line hidden
            this.Write(@"</div>
                    </td>
                </tr>
                <tr class=""border-line"">
                    <td class=""px-2""><strong>Shipper Detail</strong></td>
                    <td class=""px-2""><strong>Receiver Details</strong></td>
                </tr>
                <tr class=""border-line"">
                    <td class=""px-2"">
                        <div><strong>Name:</strong> ");
            
            #line 143 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.S_name));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Address:</strong> ");
            
            #line 144 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.DeliveryAddress));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Mobile:</strong> ");
            
            #line 145 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.S_PhoneNo));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>PAN:</strong> ");
            
            #line 146 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.S_TaxID_PANNO));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                    </td>\r\n                    <td class=\"px-2\">\r\n       " +
                    "                 <div><strong>Name:</strong> ");
            
            #line 149 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.R_name));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Address:</strong> ");
            
            #line 150 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.PickupAddress));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>Mobile:</strong> ");
            
            #line 151 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.R_PhoneNo));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                        <div><strong>PAN:</strong> ");
            
            #line 152 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.R_TaxID_PANNO));
            
            #line default
            #line hidden
            this.Write(@"</div>
                    </td>
                </tr>
                <tr class=""border-line"">
                    <td colspan=""2"" class=""px-2 py-2"">
                        <div><strong>Transaction Date:</strong></div>
                        <div><strong>Created Date:</strong> ");
            
            #line 158 "I:\TemplatePrint\Template\OrderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(order.OrderCreateDateADTimeOnly));
            
            #line default
            #line hidden
            this.Write("</div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n " +
                    "       </table>\r\n    </div>\r\n");
            
            #line 164 "I:\TemplatePrint\Template\OrderTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n<!-- Bootstrap JS (Optional if required for interactivity) -->\r\n<script src=\"ht" +
                    "tps://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.j" +
                    "s\"></script>\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class OrderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
